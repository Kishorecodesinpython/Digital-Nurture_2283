
# 🧪 NUnit Hands-On Unit Testing Project

This project demonstrates **unit testing in C# using NUnit** with Visual Studio. It contains a simple calculator class in a class library and corresponding unit tests in a separate test project.

---

## 📂 Project Structure

```

Solution 'CalcLibrary'
├── CalcLibrary
│   └── Calculator.cs
└── CalculatorTests
└── CalculatorTests.cs

````

---

## 🛠️ Tools & Frameworks

- Visual Studio (Community Edition or above)
- NUnit
- NUnit3TestAdapter
- Microsoft.NET.Test.Sdk
- .NET Framework

---

## 📦 NuGet Packages Used

Install the following **in the `CalculatorTests` project** using **Manage NuGet Packages**:

- `NUnit`
- `NUnit3TestAdapter`
- `Microsoft.NET.Test.Sdk`

---

## 📌 Calculator.cs

```csharp
namespace CalcLibrary
{
    public class Calculator
    {
        public int Add(int a, int b)
        {
            return a + b;
        }
    }
}
````

---

## ✅ CalculatorTests.cs

```csharp
using NUnit.Framework;
using CalcLibrary;

namespace CalculatorTests
{
    [TestFixture]
    public class CalculatorTests
    {
        private Calculator calculator;

        [SetUp]
        public void Init()
        {
            calculator = new Calculator();
        }

        [TearDown]
        public void Cleanup()
        {
            calculator = null;
        }

        [Test]
        public void SimpleAddTest()
        {
            int result = calculator.Add(2, 3);
            Assert.That(result, Is.EqualTo(5));
        }

        [TestCase(10, 20, 30)]
        [TestCase(0, 0, 0)]
        [TestCase(-5, -3, -8)]
        public void ParameterizedAddTest(int a, int b, int expected)
        {
            int result = calculator.Add(a, b);
            Assert.That(result, Is.EqualTo(expected));
        }

        [Test, Ignore("Skipping this test for now.")]
        public void IgnoredTestExample()
        {
            Assert.Fail("This test is ignored.");
        }
    }
}
```

---

## 🚀 How to Run the Project

1. Clone or download this repository.
2. Open the solution in Visual Studio.
3. Right-click `CalculatorTests` → Set as Startup Project.
4. Install required NuGet packages (see above).
5. Build the solution (`Ctrl + Shift + B`).
6. Open **Test Explorer** → Click **Run All**.

---

## 📈 Expected Output

You should see all test cases pass (✅) in **Test Explorer** if everything is correctly configured.

---

## 🧠 Key NUnit Features Used

* `[TestFixture]` - Marks the test class
* `[SetUp]` / `[TearDown]` - Setup and cleanup before/after each test
* `[Test]` - Basic test method
* `[TestCase]` - Parameterized tests
* `[Ignore]` - Skipped test demo

````markdown
# 📧 CustomerComm Solution - Unit Testing with NUnit and Moq

This repository demonstrates how to write testable code using **Dependency Injection (DI)** and how to **mock external dependencies** like email services using **Moq** with **NUnit** as the unit testing framework.

---

## 📁 Project Structure

| Project               | Description |
|-----------------------|-------------|
| **CustomerCommLib**   | Class Library containing the business logic, including the `IMailSender` interface and `CustomerComm` class. |
| **CustomerComm.Tests**| Unit Test project using Moq and NUnit to test `CustomerComm` logic without sending real emails. |
| **CustomerCommApp**   | Console application to run the actual logic with real email sending (not used during tests). |

---

## ✅ Objective

- Understand how mocking enhances Test-Driven Development (TDD).
- Learn Dependency Injection (DI) and Constructor Injection for testability.
- Perform unit testing without hitting real external services like SMTP.

---

## 🛠️ How to Use

### 🔧 Prerequisites
- Visual Studio 2019/2022
- .NET Framework or .NET Core SDK
- NuGet Packages:
  - `NUnit`
  - `NUnit3TestAdapter`
  - `Moq`

---

### 📦 NuGet Setup

For the **CustomerComm.Tests** project, install:
```bash
NUnit
NUnit3TestAdapter
Moq
````

Using Visual Studio:

* Right-click `CustomerComm.Tests` > Manage NuGet Packages > Browse & Install

---

### 🚀 How to Run

1. Clone or download this repo.
2. Open the solution in Visual Studio (`CustomerCommSolution.sln`).
3. Restore NuGet packages:

   * Right-click the solution > **Restore NuGet Packages**
4. Open **Test Explorer**:

   * Go to **Test > Test Explorer**
5. Click **Run All** to execute unit tests.
6. You should see ✅ tests pass.

---

## 🧪 Unit Test Scenario

We mock the `IMailSender` interface to avoid sending real emails:

```csharp
_mockMailSender.Setup(x => x.SendMail(It.IsAny<string>(), It.IsAny<string>())).Returns(true);
```

This makes `CustomerComm.SendMailToCustomer()` testable without relying on actual SMTP communication.

---

## 📄 Sample Code

### Interface & Implementation

```csharp
public interface IMailSender {
    bool SendMail(string toAddress, string message);
}

public class MailSender : IMailSender {
    public bool SendMail(string toAddress, string message) {
        // Actual email sending via SMTP
    }
}
```

### Testable Class

```csharp
public class CustomerComm {
    private IMailSender _mailSender;
    public CustomerComm(IMailSender mailSender) {
        _mailSender = mailSender;
    }
    public bool SendMailToCustomer() {
        _mailSender.SendMail("cust123@abc.com", "Some Message");
        return true;
    }
}
```

---

## ✅ Test Code Sample

```csharp
[Test]
public void SendMailToCustomer_ShouldReturnTrue() {
    _mockMailSender.Setup(x => x.SendMail(It.IsAny<string>(), It.IsAny<string>())).Returns(true);
    var result = _customerComm.SendMailToCustomer();
    Assert.IsTrue(result);
}
```

---

## 💡 Key Concepts Used

* **Dependency Injection**
* **Constructor Injection**
* **Mocking with Moq**
* **Unit Testing with NUnit**
* **Avoiding real external service calls during tests**




